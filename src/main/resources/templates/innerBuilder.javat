
<#if !constructors?? | constructors?size < 1>
  public ${class.name}() {
    // empty constructor which would otherwise be invisible due to the constructor receiving the builder. 
  }
</#if>

  private ${class.name}(Builder builder) {
<#list fields as field>
    this.${field.name} = builder.${field.name} == null ? this.${field.name} : builder.${field.name};
</#list>
  }

  /**
   * Creates builder to build {@link ${class.name}}.
   * @return created builder
   */
  public static Builder builder() {
    return new Builder();
  }

  /**
   * Builder to build {@link ${class.name}}.
   */
  public static final class Builder {
<#list fields as field>
    private ${field.type} ${field.name}<#if field.defaultInit??> = ${field.defaultInit}</#if>;
</#list>

    private Builder() {
      // Builder should only be constructed via the parent class
    }
    
    public Builder copy(${class.name} original) {
        <#list fields as field>
        <#if field.collection > 
            this.${field.name}.clear();
            this.${field.name}.addAll(original.get${field.name.upperFirst}());
        <#else>
            this.${field.name} = original.get${field.name.upperFirst}();
        </#if>
        </#list>
        return this;
    }

<#list fields as field>
    public Builder ${field.name}(${field.type} ${field.name}) {
<#if field.collection>
      this.${field.name}.clear();
      this.${field.name}.addAll(${field.name});
<#else>
      this.${field.name} = ${field.name};
</#if>
      return this;
    }
    
</#list>

    public ${class.name} build() {
      return new ${class.name}(this);
    }
  }